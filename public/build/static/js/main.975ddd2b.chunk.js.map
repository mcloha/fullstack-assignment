{"version":3,"sources":["components/SoundItem.js","components/SoundList.js","App.js","serviceWorker.js","index.js"],"names":["SoundItem","state","playing","playStatus","Sound","status","STOPPED","endTime","_this","props","recTime","playSound","PLAYING","setState","onFinishHandle","_this2","this","_this$props","url","date","_this$state","react_default","a","createElement","index_es","title","onClick","Pause_default","PlayArrow_default","primary","concat","substr","lib_default","onFinishedPlaying","Component","SoundList","sounds","extractData","sound","creationDate","indexOf","duration","parseInt","axios","get","then","res","data","catch","err","console","log","_this3","classes","className","soundList","map","index","_this3$extractData","Date","components_SoundItem","key","toString","withStyles","theme","display","justifyContent","App","components_SoundList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.975ddd2b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { ListItem, ListItemIcon, ListItemText, IconButton, Divider } from '@material-ui/core';\r\nimport Sound from 'react-sound';\r\nimport PlayArroIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\n\r\nclass SoundItem extends Component {\r\n    state = {\r\n        playing: false,\r\n        playStatus: Sound.status.STOPPED,\r\n        endTime: (this.props.recTime / 60) / 60,\r\n    }\r\n    playSound = () => {\r\n        if (this.state.playStatus === Sound.status.PLAYING) {\r\n            this.setState({\r\n                playing: false,\r\n                playStatus: Sound.status.STOPPED\r\n            });\r\n        } else {\r\n            this.setState({\r\n                playing: true,\r\n                playStatus: Sound.status.PLAYING\r\n            });\r\n        }\r\n        \r\n    }\r\n    onFinishHandle = () => {\r\n        this.setState({\r\n            playing: false,\r\n            playStatus: Sound.status.STOPPED,\r\n        })\r\n    }\r\n    render() {\r\n        const { url, date } = this.props;\r\n        const { endTime, playStatus } = this.state;\r\n        return (\r\n            <div>\r\n                <ListItem>\r\n                    <ListItemIcon>\r\n                    {\r\n                        !this.state.playing ? (\r\n                        <IconButton title=\"play\" onClick={() => this.playSound()}>\r\n                            <PlayArroIcon />\r\n                        </IconButton> \r\n                        ) : (\r\n                        <IconButton title=\"pause\" onClick={() => this.playSound()}>\r\n                            <PauseIcon />\r\n                        </IconButton> \r\n                        )\r\n                    }\r\n                    </ListItemIcon>\r\n                    <ListItemText primary={date} />\r\n                    <ListItemText primary={`${endTime}`.substr(0, 3)} />\r\n                </ListItem>\r\n                <Divider />\r\n                <Sound \r\n                    url={url} \r\n                    playStatus={playStatus}\r\n                    onFinishedPlaying={this.onFinishHandle}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SoundItem;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { List } from '@material-ui/core';\r\nimport SoundItem from './SoundItem';\r\nimport axios from 'axios';\r\n\r\nconst url = 'https://5e01f26c.ngrok.io'\r\n\r\nclass SoundList extends Component {\r\n    state = {\r\n        sounds: []\r\n    }\r\n    componentWillMount() {\r\n        axios.get(`${url}/list`)\r\n        .then(res => {\r\n            this.setState({\r\n                sounds: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n        console.log(this.state.sounds);\r\n    }\r\n    \r\n    extractData = (sound) => {\r\n        let creationDate = sound.substr(0, sound.indexOf(','));\r\n        let duration = sound.substr(sound.indexOf(',') + 1, sound.indexOf('.'));\r\n        duration = parseInt(duration, 10) - parseInt(creationDate, 10);\r\n        return { creationDate: parseInt(creationDate, 10), duration: parseInt(duration, 10) };\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { sounds } = this.state;\r\n        return (\r\n            <div className={classes.soundList}>\r\n                <List>\r\n                    {sounds.map((sound, index) => {\r\n                        let { creationDate, duration } = this.extractData(sound);\r\n                        let date = new Date(creationDate);\r\n                        return <SoundItem key={index} date={date.toString() || 'creation-date'} url={`${url}/data/${sound}`} recTime={duration}/>\r\n                    })}\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = theme => ({\r\n    soundList: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n});\r\n\r\nSoundList.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n  \r\nexport default withStyles(styles)(SoundList);\r\n","import React, { Component } from 'react';\nimport SoundList from './components/SoundList';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SoundList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}